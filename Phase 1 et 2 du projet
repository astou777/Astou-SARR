   # PROJET GOMYCODE
# Partie 1
# 1
import tkinter as tk
import json
# 2 
# Chargement des données du quiz à partir du fichier JSON
with open('C:/Users/DELL/Desktop/fichier_quiz.json', 'r') as file:
    fichier_quiz = json.load(file)
    
# Les données du quiz incluent les questions et les réponses
questions = fichier_quiz['questions']
answers = [(question['r']) for question in questions]
options = []
for question in questions:
        question_options = [question['r1'], question['r2'], question['r3']]
        options.append(question_options)
# 3
# Création de la classe Quiz
class Quiz:
    def __init__(self, questions, answers):
        self.questions = questions
        self.answers = answers
        self.score = 0
        self.current_question_index = 0
        self.total_questions = len(questions)

    def get_current_question(self):
        return self.questions[self.current_question_index]['q']

    def get_current_options(self):
        current_question = self.questions[self.current_question_index]
        return [current_question['r1'], current_question['r2'], current_question['r3']]

    def check_answer(self, user_answer):
        correct_answer = self.answers[self.current_question_index]
        if user_answer == correct_answer:
            self.score += 1
        self.current_question_index += 1

    def is_quiz_finished(self):
        return self.current_question_index >= self.total_questions

# 4
class QuizApp:
    def __init__(self, root, quiz):
        self.root = root
        self.quiz = quiz

        # Affichage de la question
        self.question_label = tk.Label(root, text="", font=("Arial", 16))
        self.question_label.pack(pady=20)

        # Boutons d'options
        self.option_buttons = []
        for i in range(3):  # Il y a 3 options par question
            button = tk.Button(root, text="", font=("Arial", 14), width=20, command=lambda i=i: self.check_answer(self.option_buttons[i].cget("text")))
            button.pack(pady=5)
            self.option_buttons.append(button)

        # Boutons de navigation
        self.next_button = tk.Button(root, text="Suivant", font=("Arial", 14), state=tk.DISABLED, command=self.next_question)
        self.next_button.pack(side=tk.LEFT, padx=10, pady=20)

        self.quit_button = tk.Button(root, text="Quitter", font=("Arial", 14), command=self.quit_quiz)
        self.quit_button.pack(side=tk.RIGHT, padx=10, pady=20)

        # Afficher la première question
        self.show_question()

    def show_question(self):
        """Affiche la question actuelle et les options de réponse."""
        question = self.quiz.get_current_question()
        self.display_question_text(question["q"])
        self.display_options(question)

    def display_question_text(self, question_text):
        """Affiche le texte de la question."""
        self.question_label.config(text=question_text)

    def display_options(self, question):
        """Affiche les options de réponse pour la question actuelle."""
        options = [question["r1"], question["r2"], question["r3"]]  # Récupération des options
        for i, option in enumerate(options):
            self.option_buttons[i].config(text=option, state=tk.NORMAL)
        self.next_button.config(state=tk.DISABLED)

    def check_answer(self, selected_option):
        """Vérifie la réponse sélectionnée et met à jour l'état des boutons."""
        has_more_questions = self.quiz.check_answer(selected_option)
        self.next_button.config(state=tk.NORMAL if has_more_questions else tk.DISABLED)
        for button in self.option_buttons:
            button.config(state=tk.DISABLED)

        if not has_more_questions:
            self.quit_button.config(state=tk.NORMAL)

    def next_question(self):
        """Affiche la question suivante ou termine le quiz si aucune question restante."""
        if self.quiz.current_question_index < len(self.quiz.questions):
            self.show_question()
        else:
            self.quit_quiz()

    def quit_quiz(self):
        """Affiche le score final et termine le quiz."""
        score = self.quiz.get_score()
        total_questions = len(self.quiz.questions)
        messagebox.showinfo("Résultat", f"Score: {score}/{total_questions}")
        self.root.destroy()

# 5 deja fait sur quiz

# 6

def check_answer(self, selected_option):
    """Vérifie la réponse sélectionnée et met à jour l'état des boutons."""
    has_more_questions = self.quiz.check_answer(selected_option)
    self.next_button.config(state=tk.NORMAL if has_more_questions else tk.DISABLED)
    for button in self.option_buttons:
        button.config(state=tk.DISABLED)

    if not has_more_questions:
        self.quit_button.config(state=tk.NORMAL)

# code complet
# Charger les données du quiz à partir du fichier JSON
with open('C:/Users/DELL/Desktop/fichier_quiz.json', 'r') as file:
    fichier_quiz = json.load(file)

# Assurez-vous que les données du quiz incluent les questions et les réponses
questions = fichier_quiz['questions']

# Créer une instance de la classe Quiz
quiz = Quiz(questions)

# Création de la fenêtre Tkinter
root = tk.Tk()
root.title("Quiz App")

# Création de l'application Quiz
app = QuizApp(root, quiz)

# Lancement de la boucle principale Tkinter
root.mainloop()




# partie 2


# 1
import tkinter as tk
from tkinter import messagebox
import json

# 2
# Charger les données du quiz à partir du fichier JSON
with open('C:/Users/DELL/Desktop/fichier_quiz.json', 'r') as file:
    fichier_quiz = json.load(file)

# Assurez-vous que les données du quiz incluent les questions et les réponses
questions = fichier_quiz['questions']
answers = [question['r'] for question in questions]

# 3
class Quiz:
    def __init__(self, questions, answers):
        self.questions = questions
        self.answers = answers
        self.current_question_index = 0
        self.score = 0

    def get_current_question(self):
        return self.questions[self.current_question_index]

    def check_answer(self, selected_option):
        correct_answer = self.get_current_question()['r']
        if selected_option == correct_answer:
            self.score += 1
        self.current_question_index += 1
        return self.current_question_index < len(self.questions)

    def get_score(self):
        return self.score

    def get_total_questions(self):
        return len(self.questions)

# 4        
class QuizApp:
    def __init__(self, root, quiz):
        self.root = root
        self.quiz = quiz

        # Affichage de la question
        self.question_label = tk.Label(root, text="", font=("Arial", 16))
        self.question_label.pack(pady=20)

        # Boutons d'options
        self.option_buttons = []
        for i in range(3):  # Il y a 3 options par question
            button = tk.Button(root, text="", font=("Arial", 14), width=20, command=lambda i=i: self.check_answer(self.option_buttons[i].cget("text")))
            button.pack(pady=5)
            self.option_buttons.append(button)

        # Boutons de navigation
        self.next_button = tk.Button(root, text="Suivant", font=("Arial", 14), state=tk.DISABLED, command=self.next_question)
        self.next_button.pack(side=tk.LEFT, padx=10, pady=20)

        self.quit_button = tk.Button(root, text="Quitter", font=("Arial", 14), command=self.quit_quiz)
        self.quit_button.pack(side=tk.RIGHT, padx=10, pady=20)

        # Afficher la première question
        self.show_question()

    def show_question(self):
        """Affiche la question actuelle et les options de réponse."""
        question = self.quiz.get_current_question()
        self.display_question_text(question["q"])
        self.display_options(question)

    def display_question_text(self, question_text):
        """Affiche le texte de la question."""
        self.question_label.config(text=question_text)

    def display_options(self, question):
        """Affiche les options de réponse pour la question actuelle."""
        options = [question["r1"], question["r2"], question["r3"]]  # Récupération des options
        for i, option in enumerate(options):
            self.option_buttons[i].config(text=option, state=tk.NORMAL)
        self.next_button.config(state=tk.DISABLED)

    def check_answer(self, selected_option):
        """Vérifie la réponse sélectionnée et met à jour l'état des boutons."""
        has_more_questions = self.quiz.check_answer(selected_option)
        self.next_button.config(state=tk.NORMAL if has_more_questions else tk.DISABLED)
        for button in self.option_buttons:
            button.config(state=tk.DISABLED)

        if not has_more_questions:
            self.quit_button.config(state=tk.NORMAL)

    def next_question(self):
        """Affiche la question suivante ou termine le quiz si aucune question restante."""
        if self.quiz.current_question_index < len(self.quiz.questions):
            self.show_question()
        else:
            self.quit_quiz()

    def quit_quiz(self):
        """Affiche le score final et termine le quiz."""
        score = self.quiz.get_score()
        total_questions = self.quiz.get_total_questions()
        messagebox.showinfo("Résultat", f"Score: {score}/{total_questions}")
        self.root.destroy()

# 5
# Création de la fenêtre Tkinter
root = tk.Tk()
root.title("Quiz App")

# Créer une instance de la classe Quiz avec questions et answers
quiz = Quiz(questions, answers)

# Création de l'application Quiz
app = QuizApp(root, quiz)

# Lancement de la boucle principale Tkinter
root.mainloop()


   # PROJET GOMYCODE
# Partie 1
# 1
import tkinter as tk
import json
# 2 
# Chargement des données du quiz à partir du fichier JSON
with open('C:/Users/DELL/Desktop/fichier_quiz.json', 'r') as file:
    fichier_quiz = json.load(file)
    
# Les données du quiz incluent les questions et les réponses
questions = fichier_quiz['questions']
answers = [(question['r']) for question in questions]
options = []
for question in questions:
        question_options = [question['r1'], question['r2'], question['r3']]
        options.append(question_options)
# 3
# Création de la classe Quiz
class Quiz:
    def __init__(self, questions, answers):
        self.questions = questions
        self.answers = answers
        self.score = 0
        self.current_question_index = 0
        self.total_questions = len(questions)

    def get_current_question(self):
        return self.questions[self.current_question_index]['q']

    def get_current_options(self):
        current_question = self.questions[self.current_question_index]
        return [current_question['r1'], current_question['r2'], current_question['r3']]

    def check_answer(self, user_answer):
        correct_answer = self.answers[self.current_question_index]
        if user_answer == correct_answer:
            self.score += 1
        self.current_question_index += 1

    def is_quiz_finished(self):
        return self.current_question_index >= self.total_questions

# 4
class QuizApp:
    def __init__(self, root, quiz):
        self.root = root
        self.quiz = quiz

        # Affichage de la question
        self.question_label = tk.Label(root, text="", font=("Arial", 16))
        self.question_label.pack(pady=20)

        # Boutons d'options
        self.option_buttons = []
        for i in range(3):  # Il y a 3 options par question
            button = tk.Button(root, text="", font=("Arial", 14), width=20, command=lambda i=i: self.check_answer(self.option_buttons[i].cget("text")))
            button.pack(pady=5)
            self.option_buttons.append(button)

        # Boutons de navigation
        self.next_button = tk.Button(root, text="Suivant", font=("Arial", 14), state=tk.DISABLED, command=self.next_question)
        self.next_button.pack(side=tk.LEFT, padx=10, pady=20)

        self.quit_button = tk.Button(root, text="Quitter", font=("Arial", 14), command=self.quit_quiz)
        self.quit_button.pack(side=tk.RIGHT, padx=10, pady=20)

        # Afficher la première question
        self.show_question()

    def show_question(self):
        """Affiche la question actuelle et les options de réponse."""
        question = self.quiz.get_current_question()
        self.display_question_text(question["q"])
        self.display_options(question)

    def display_question_text(self, question_text):
        """Affiche le texte de la question."""
        self.question_label.config(text=question_text)

    def display_options(self, question):
        """Affiche les options de réponse pour la question actuelle."""
        options = [question["r1"], question["r2"], question["r3"]]  # Récupération des options
        for i, option in enumerate(options):
            self.option_buttons[i].config(text=option, state=tk.NORMAL)
        self.next_button.config(state=tk.DISABLED)

    def check_answer(self, selected_option):
        """Vérifie la réponse sélectionnée et met à jour l'état des boutons."""
        has_more_questions = self.quiz.check_answer(selected_option)
        self.next_button.config(state=tk.NORMAL if has_more_questions else tk.DISABLED)
        for button in self.option_buttons:
            button.config(state=tk.DISABLED)

        if not has_more_questions:
            self.quit_button.config(state=tk.NORMAL)

    def next_question(self):
        """Affiche la question suivante ou termine le quiz si aucune question restante."""
        if self.quiz.current_question_index < len(self.quiz.questions):
            self.show_question()
        else:
            self.quit_quiz()

    def quit_quiz(self):
        """Affiche le score final et termine le quiz."""
        score = self.quiz.get_score()
        total_questions = len(self.quiz.questions)
        messagebox.showinfo("Résultat", f"Score: {score}/{total_questions}")
        self.root.destroy()

# 5 deja fait sur quiz

# 6

def check_answer(self, selected_option):
    """Vérifie la réponse sélectionnée et met à jour l'état des boutons."""
    has_more_questions = self.quiz.check_answer(selected_option)
    self.next_button.config(state=tk.NORMAL if has_more_questions else tk.DISABLED)
    for button in self.option_buttons:
        button.config(state=tk.DISABLED)

    if not has_more_questions:
        self.quit_button.config(state=tk.NORMAL)

# code complet
# Charger les données du quiz à partir du fichier JSON
with open('C:/Users/DELL/Desktop/fichier_quiz.json', 'r') as file:
    fichier_quiz = json.load(file)

# Assurez-vous que les données du quiz incluent les questions et les réponses
questions = fichier_quiz['questions']

# Créer une instance de la classe Quiz
quiz = Quiz(questions)

# Création de la fenêtre Tkinter
root = tk.Tk()
root.title("Quiz App")

# Création de l'application Quiz
app = QuizApp(root, quiz)

# Lancement de la boucle principale Tkinter
root.mainloop()




# partie 2


# 1
import tkinter as tk
from tkinter import messagebox
import json

# 2
# Charger les données du quiz à partir du fichier JSON
with open('C:/Users/DELL/Desktop/fichier_quiz.json', 'r') as file:
    fichier_quiz = json.load(file)

# Assurez-vous que les données du quiz incluent les questions et les réponses
questions = fichier_quiz['questions']
answers = [question['r'] for question in questions]

# 3
class Quiz:
    def __init__(self, questions, answers):
        self.questions = questions
        self.answers = answers
        self.current_question_index = 0
        self.score = 0

    def get_current_question(self):
        return self.questions[self.current_question_index]

    def check_answer(self, selected_option):
        correct_answer = self.get_current_question()['r']
        if selected_option == correct_answer:
            self.score += 1
        self.current_question_index += 1
        return self.current_question_index < len(self.questions)

    def get_score(self):
        return self.score

    def get_total_questions(self):
        return len(self.questions)

# 4        
class QuizApp:
    def __init__(self, root, quiz):
        self.root = root
        self.quiz = quiz

        # Affichage de la question
        self.question_label = tk.Label(root, text="", font=("Arial", 16))
        self.question_label.pack(pady=20)

        # Boutons d'options
        self.option_buttons = []
        for i in range(3):  # Il y a 3 options par question
            button = tk.Button(root, text="", font=("Arial", 14), width=20, command=lambda i=i: self.check_answer(self.option_buttons[i].cget("text")))
            button.pack(pady=5)
            self.option_buttons.append(button)

        # Boutons de navigation
        self.next_button = tk.Button(root, text="Suivant", font=("Arial", 14), state=tk.DISABLED, command=self.next_question)
        self.next_button.pack(side=tk.LEFT, padx=10, pady=20)

        self.quit_button = tk.Button(root, text="Quitter", font=("Arial", 14), command=self.quit_quiz)
        self.quit_button.pack(side=tk.RIGHT, padx=10, pady=20)

        # Afficher la première question
        self.show_question()

    def show_question(self):
        """Affiche la question actuelle et les options de réponse."""
        question = self.quiz.get_current_question()
        self.display_question_text(question["q"])
        self.display_options(question)

    def display_question_text(self, question_text):
        """Affiche le texte de la question."""
        self.question_label.config(text=question_text)

    def display_options(self, question):
        """Affiche les options de réponse pour la question actuelle."""
        options = [question["r1"], question["r2"], question["r3"]]  # Récupération des options
        for i, option in enumerate(options):
            self.option_buttons[i].config(text=option, state=tk.NORMAL)
        self.next_button.config(state=tk.DISABLED)

    def check_answer(self, selected_option):
        """Vérifie la réponse sélectionnée et met à jour l'état des boutons."""
        has_more_questions = self.quiz.check_answer(selected_option)
        self.next_button.config(state=tk.NORMAL if has_more_questions else tk.DISABLED)
        for button in self.option_buttons:
            button.config(state=tk.DISABLED)

        if not has_more_questions:
            self.quit_button.config(state=tk.NORMAL)

    def next_question(self):
        """Affiche la question suivante ou termine le quiz si aucune question restante."""
        if self.quiz.current_question_index < len(self.quiz.questions):
            self.show_question()
        else:
            self.quit_quiz()

    def quit_quiz(self):
        """Affiche le score final et termine le quiz."""
        score = self.quiz.get_score()
        total_questions = self.quiz.get_total_questions()
        messagebox.showinfo("Résultat", f"Score: {score}/{total_questions}")
        self.root.destroy()

# 5
# Création de la fenêtre Tkinter
root = tk.Tk()
root.title("Quiz App")

# Créer une instance de la classe Quiz avec questions et answers
quiz = Quiz(questions, answers)

# Création de l'application Quiz
app = QuizApp(root, quiz)

# Lancement de la boucle principale Tkinter
root.mainloop()


